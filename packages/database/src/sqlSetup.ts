import { env } from "core";
import { Logger } from "log";
import type pg from "pg";

const logger = new Logger();

export async function createSchemas(pool: pg.Pool) {
    const client = await pool.connect();

    logger.infoSingle("Creating Schema", "PostgreSQL");
    try {
        await client.query(`
            CREATE SCHEMA IF NOT EXISTS bot
        `);

        logger.infoSingle("Schema created successfully", "PostgreSQL");
    } catch (err: any) {
        logger.error("Error creating schema", "PostgreSQL", err);
    } finally {
        client.release();
    }

    await createDatabase(pool);
}

async function createDatabase(pool: pg.Pool) {
    const client = await pool.connect();

    logger.infoSingle("Starting to create tables", "PostgreSQL");

    try {
        await client.query(`
            CREATE TABLE IF NOT EXISTS bot.tbl_user (
                discord_id BIGINT PRIMARY KEY,
                premium BOOLEAN NOT NULL,
                posts INT NOT NULL,
                runs_left SMALLINT NOT NULL
            )
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS bot.tbl_snippets (
                snippit_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                discord_id BIGINT REFERENCES bot.tbl_user(discord_id) ON DELETE CASCADE ON UPDATE CASCADE,
                snippit_code TEXT NOT NULL,
                snippit_lang VARCHAR(10) NOT NULL,
                snippit_outcome TEXT NOT NULL
            )
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS bot.tbl_posts (
                post_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                discord_id BIGINT REFERENCES bot.tbl_user(discord_id) ON DELETE CASCADE ON UPDATE CASCADE,
                post_content TEXT NOT NULL,
                post_date TIMESTAMP NOT NULL,
                post_lang VARCHAR(10) NOT NULL,
                post_keywords TEXT NOT NULL,
                post_likes INT NOT NULL,
                post_dislikes INT NOT NULL,
                post_comments INT NOT NULL
            )
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS bot.tbl_post_comments (
                comment_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                post_id BIGINT REFERENCES bot.tbl_posts(post_id) ON DELETE CASCADE ON UPDATE CASCADE,
                discord_id BIGINT REFERENCES bot.tbl_user(discord_id) ON DELETE CASCADE ON UPDATE CASCADE,
                comment_content TEXT NOT NULL,
                comment_date TIMESTAMP NOT NULL
            )
        `);

        logger.infoSingle("Tables created successfully", "PostgreSQL");
    } catch (err: any) {
        logger.error("Error creating table", "PostgreSQL", err);
    } finally {
        client.release();
    }

    if (env.DATABASE_SEEDING) {
        await seedDatabase(pool);
    }
}

export async function seedDatabase(pool: pg.Pool) {
    const client = await pool.connect();

    logger.infoSingle("Starting to seed database", "PostgreSQL");

    try {
        await client.query(`
            INSERT INTO bot.tbl_user (discord_id, premium, posts, runs_left)
            VALUES 
                (123456789012345678, true, 15, 5),
                (987654321098765432, false, 10, 2),
                (192837465564738291, true, 20, 3)
            ON CONFLICT (discord_id) DO NOTHING;
        `);
        await client.query(`
            INSERT INTO bot.tbl_snippets (SNIPPIT_ID, DISCORD_ID, SNIPPIT_CODE, SNIPPIT_LANG, SNIPPIT_OUTCOME)
            VALUES 
                (1, 123456789012345678, 'console.log("Hello World!");', 'js', 'Success'),
                (2, 987654321098765432, 'print("Hello World!")', 'py', 'Success'),
                (3, 192837465564738291, 'System.out.println("Hello World!");', 'java', 'Success')
            ON CONFLICT (SNIPPIT_ID) DO NOTHING;
        `);

        await client.query(`
            INSERT INTO bot.tbl_posts (POST_ID, DISCORD_ID, POST_CONTENT, POST_DATE, POST_LANG, POST_KEYWORDS, POST_LIKES, POST_DISLIKES, POST_COMMENTS)
            VALUES 
                (1, 123456789012345678, 'This is a test post', NOW(), 'js', 'test,post', 10, 0, 5),
                (2, 987654321098765432, 'Another post testing', NOW(), 'py', 'another,post', 5, 1, 2),
                (3, 192837465564738291, 'I believe we should add ... to the bot!', NOW(), 'java', 'more,post', 8, 2, 1)
            ON CONFLICT (POST_ID) DO NOTHING;
        `);

        await client.query(`
            INSERT INTO bot.tbl_post_comments (COMMENT_ID, POST_ID, DISCORD_ID, COMMENT_CONTENT, COMMENT_DATE)
            VALUES 
                (1, 1, 123456789012345678, 'Nice post!', NOW()),
                (2, 1, 987654321098765432, 'Thanks for sharing!', NOW()),
                (3, 2, 192837465564738291, 'Interesting read!', NOW())
            ON CONFLICT (COMMENT_ID) DO NOTHING;
        `);

        logger.infoSingle("PostgreSQL", "Database seeded successfully");
    } catch (err: any) {
        logger.error("Error seeding database", "PostgreSQL", err);
    } finally {
        await client.release();
    }
}
