generator client {
  provider = "prisma-client-js"
  output   = "./gen/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum ContentType {
  CODE
  ERROR
}

enum InteractionType {
  LIKE
  DISLIKE
}

model User {
  id               BigInt     @id @default(autoincrement())
  discord_id       BigInt?
  username         String     @db.VarChar(32)
  avatar           Bytes?     @db.ByteA
  premium          Boolean    @default(false)
  code_runs_left   Int        @default(30)
  posts            Post[]
  comments         Comments[]
  postinteractions PostInteraction[]
  snippets         Snippets[]
}

model Post {
  id                String     @id @default(nanoid(8))
  uploader_id       BigInt
  title             String     @db.VarChar(32)
  description       String     @db.VarChar(256)
  keywords          String[]   @default([])
  likes             Int        @default(0)
  dislikes          Int        @default(0)
  language          String     @db.VarChar(12)
  uploader          User       @relation(fields: [uploader_id], references: [id])
  paste             Paste[]
  comments          Comments[]
  postsinteractions PostInteraction[]
}

model PostInteraction {
  id          BigInt   @id @default(autoincrement())
  post_id     String
  user_id     BigInt
  interaction InteractionType @default(LIKE)
  post        Post     @relation(fields: [post_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
}

model Paste {
  id           String      @id @default(nanoid(8))
  post_id      String
  content      String      @db.Text
  content_type ContentType @default(CODE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  Post         Post        @relation(fields: [post_id], references: [id])
}

model Comments {
  id          BigInt   @id @default(autoincrement())
  post_id     String
  uploader_id BigInt
  message     String   @db.VarChar(256)
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  post        Post     @relation(fields: [post_id], references: [id])
  uploader    User     @relation(fields: [uploader_id], references: [id])
}

model Snippets {
  id            String   @id @default(nanoid(8))
  snippet_image Bytes    @db.ByteA
  result        String?
  uploader_id   BigInt
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uploader      User     @relation(fields: [uploader_id], references: [id])
}