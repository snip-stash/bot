generator client {
  provider = "prisma-client-js"
  output   = "./gen/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  // ID can either be the discord id or the id of the user in the database
  // If the user connects their discord account, the id will be the discord id
  id                    BigInt          @id @unique @default(autoincrement())
  username              String          @unique @db.VarChar(32)
  avatar                Bytes?          @db.ByteA
  premium               Boolean         @default(false)
  amount_of_posts       Int             @default(0)
  code_runs             Int             @default(30)
  snippets              Snippet[]
  comments              Comments[]
  pastes                Paste[]
  posts                 Post[]
}

model Post {
  id                Int             @id @unique @default(autoincrement())
  paste_id          String          @unique @default(nanoid(8)) @db.VarChar(8)
  uploader_id       BigInt          @unique
  title             String          @db.VarChar(32)
  description       String          @db.VarChar(500)
  date              DateTime        @default(now())
  keywords          String[]        @default([]) @db.VarChar(32)
  likes             Int?            @default(0)
  dislikes          Int?            @default(0)
  comments          Comments[]
  uploader          User            @relation(fields: [uploader_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paste             Paste?
  
}

model Paste {
  id                String?       @unique @default(nanoid(8))
  content           String        @db.Text
  language          String        @db.VarChar(12)
  uploader_id       BigInt        @id
  uploader          User          @relation(fields: [uploader_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post              Post?         @relation(fields: [id], references: [paste_id], onUpdate: Cascade, onDelete: Cascade)
  date              DateTime      @default(now())
}

model Comments {
  uploader_id       BigInt        @id @unique
  content           String
  likes             Int?          @default(0)
  dislikes          Int?          @default(0)
  date              DateTime      @default(now())
  post              Post?         @relation(fields: [uploader_id], references: [uploader_id], onUpdate: Cascade, onDelete: Cascade)
  postId            Int?
  User              User?         @relation(fields: [userId], references: [id])
  userId            BigInt?
}

model Snippet {
  id                Int             @id @unique @default(autoincrement())
  code              String
  language          String          @db.VarChar(12)
  result            String?         @db.Text
  date              DateTime        @default(now())
  uploader_id       BigInt
  uploader          User            @relation(fields: [uploader_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
